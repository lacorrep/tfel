@DSL       Implicit;
@Behaviour JohnsonCook_s;
@Author    Guillaume Michal;
@Date      21/06/2017;

@Description
{
  Simplified Johnson-Cook law: Rp = (A+B*p^n)
  No strain rate and no temperature effects for learning purposes. 
  
  This example implements the analytical jacobian using the Implicit DSL
  Material parameters is the full list for testing convenience.
  
  This is a file part of a set of three:
  - johnsoncook_s   : Strain influence,
  - johnsoncook_ssr : Strain and Strain Rate influence,
  - johnsoncook_ssrt: Strain and Strain Rate and Temperature influence (adiabatic heating).
  
  Author: G. Michal, University of Wollongong, NSW, Australia.
  Last modified: 21st of May 2017. 
}

@Algorithm NewtonRaphson;
@Epsilon 1.e-12;
@Theta 1. ;

@ModellingHypotheses {".+"};
@Brick StandardElasticity;
@ElasticMaterialProperties {212000.,0.33};

@Parameter A = 57.27;
@Parameter B = 479.93;
@Parameter n = 0.316;

@StateVariable strain  p;
@PhysicalBounds p in [0:*[;

@LocalVariable stress Fel;

@StaticVariable real p_eps = 1.e-13;
@StaticVariable real seq_eps = 1.e-13;

/* Initialize constants within the iterative scheme */
@InitLocalVariables{
  // Elastic stress preediction and equivalent elastic stress
  const auto sigel = computeElasticPrediction();
  const auto seqel = sigmaeq(sigel);
  // Hardening law elastic prediction.
  const auto rp = (A+B*pow(max(p_eps,p), n));
  // Yield surface
  Fel = seqel - rp;
}

@Integrator{	
  if(Fel <= 0){
    return true;
  }
  // Flow direction
  const auto seq   = sigmaeq(sig);
  const auto iseq  = 1/max(seq,stress(seq_eps*young));
  const auto n_    = eval(3*deviator(sig)*(iseq/2));
  // Plastic increment
  const auto p_ = max(p_eps,p+theta*dp);
  // Hardening law and partial derivative
  const auto ppow    = B*pow(p_,n-1);
  const auto rp      = A+p_*ppow;
  const auto drp_ddp = theta*n*ppow;
  // Implicit system of equations to solve for dp and deel
  fp           = (seq-rp)/young;
  dfp_ddeel    = 2*(mu/young)*theta*n_;
  dfp_ddp      = -drp_ddp/young;
  feel        += dp*n_;
  dfeel_ddeel += 2*mu*theta*dp*(Stensor4::M()-(n_^n_))*iseq;
  dfeel_ddp    = n_;
 }
